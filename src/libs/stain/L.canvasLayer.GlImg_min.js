var elums = ["leaflet", "crypto", "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", "Failedtocreateprogram", "Failedtolinkprogram:", "unabletocreateshader", "Failedtocompileshader:", "webgl", "experimental-webgl", "webkit-3d", "moz-webgl", "canvas", "2d", "rgba(", ",", "255)", "image/png", "Polygon", "rgba(255,0,0,255)", "overlayPane", "选择切割选项，没有输入边界信息", "zoomanim", "moveend", "resize", "leaflet-layer", "初始化着色器失败", "leaflet-zoom-", "animated", "hide", "当前纹理不存在,不用重复删除", "WEBGL_lose_context", "123456789abcdefg", "abcdefg123456789", "base64", "binary", "aes-128-cbc", "utf8", "a_Position", "u_Sampler", "u_Table", "u_map", "tvalue", "tbound", "opacity", "scale", "tcoord", "tsize", "tlatlng"]; import _$C1lIPX from "leaflet"; import _$1zXM2Y from "crypto"; var _$o4fJkO = elums[2]; var _$NnKy7X = elums[3]; var _$pKGkGN = elums[4]; var _$8KXrtf = elums[5]; var _$WAjXMU = elums[6]; function _$USK2yR() { this['initShaders'] = function (_$PHqS4w, _$8YgSwh, _$6bzd3a) { var _$U9hcok = _$wXd83c(_$PHqS4w, _$8YgSwh, _$6bzd3a); if (!_$U9hcok) { console['log'](elums[7]); return false; } _$PHqS4w['useProgram'](_$U9hcok); _$PHqS4w['program'] = _$U9hcok; return true; }; this['createBuffer'] = function (_$oXyGUn, _$GZcgFL) { var _$r60sYB = _$oXyGUn['createBuffer'](); _$oXyGUn['bindBuffer'](_$oXyGUn['ARRAY_BUFFER'], _$r60sYB); _$oXyGUn['bufferData'](_$oXyGUn['ARRAY_BUFFER'], _$GZcgFL, _$oXyGUn['STATIC_DRAW']); return _$r60sYB; }; this['attributeBuffer'] = function (gl, buffer, attribute, pointNum, frizeNum, frizeOffset) { gl['bindBuffer'](gl['ARRAY_BUFFER'], buffer); gl['vertexAttribPointer'](attribute, pointNum, gl['FLOAT'], false, frizeNum, frizeOffset); gl['enableVertexAttribArray'](attribute); }; this['createVexture'] = function (_$LY5wMP, _$NHZLJc, _$RS97py) { var _$gZSnRU = _$LY5wMP['createTexture'](); _$LY5wMP['bindTexture'](_$LY5wMP['TEXTURE_2D'], _$gZSnRU); if (_$RS97py) { _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_MIN_FILTER'], _$LY5wMP['NEAREST']); _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_MAG_FILTER'], _$LY5wMP['NEAREST']); } else { _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_MIN_FILTER'], _$LY5wMP['LINEAR']); _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_MAG_FILTER'], _$LY5wMP['LINEAR']); } _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_WRAP_S'], _$LY5wMP['CLAMP_TO_EDGE']); _$LY5wMP['texParameteri'](_$LY5wMP['TEXTURE_2D'], _$LY5wMP['TEXTURE_WRAP_T'], _$LY5wMP['CLAMP_TO_EDGE']); _$LY5wMP['texImage2D'](_$LY5wMP['TEXTURE_2D'], 0, _$LY5wMP['RGBA'], _$LY5wMP['RGBA'], _$LY5wMP['UNSIGNED_BYTE'], _$NHZLJc); return _$gZSnRU; }; this['bindVexture'] = function (gl, texture, num) { gl['activeTexture'](gl['TEXTURE0'] + num); gl['bindTexture'](gl['TEXTURE_2D'], texture); }; var _$wXd83c = function (_$jmcFqR, _$AFYucl, _$PanLai) { var _$hWg32j = _$7FBQvY(_$jmcFqR, _$jmcFqR['VERTEX_SHADER'], _$AFYucl); var _$1uCcyr = _$7FBQvY(_$jmcFqR, _$jmcFqR['FRAGMENT_SHADER'], _$PanLai); if (!_$hWg32j || !_$1uCcyr) { return null; } var _$pjq4qQ = _$jmcFqR['createProgram'](); if (!_$pjq4qQ) { return null; } _$jmcFqR['attachShader'](_$pjq4qQ, _$hWg32j); _$jmcFqR['attachShader'](_$pjq4qQ, _$1uCcyr); _$jmcFqR['linkProgram'](_$pjq4qQ); var _$i9c3ZX = _$jmcFqR['getProgramParameter'](_$pjq4qQ, _$jmcFqR['LINK_STATUS']); if (!_$i9c3ZX) { var _$0vsIy7 = _$jmcFqR['getProgramInfoLog'](_$pjq4qQ); console['log'](elums[8] + _$0vsIy7); _$jmcFqR['deleteProgram'](_$pjq4qQ); _$jmcFqR['deleteShader'](_$1uCcyr); _$jmcFqR['deleteShader'](_$hWg32j); return null; } return _$pjq4qQ; }; var _$7FBQvY = function (_$dUcLUc, _$sI64D4, _$5xkyqZ) { var _$XF8GUg = _$dUcLUc['createShader'](_$sI64D4); if (_$XF8GUg == null) { console['log'](elums[9]); return null; } _$dUcLUc['shaderSource'](_$XF8GUg, _$5xkyqZ); _$dUcLUc['compileShader'](_$XF8GUg); var _$5bnSQQ = _$dUcLUc['getShaderParameter'](_$XF8GUg, _$dUcLUc['COMPILE_STATUS']); if (!_$5bnSQQ) { var _$SbhL5d = _$dUcLUc['getShaderInfoLog'](_$XF8GUg); console['log'](elums[10] + _$SbhL5d); _$dUcLUc['deleteShader'](_$XF8GUg); return null; } return _$XF8GUg; }; this['getWebGLContext'] = function (_$Iugf3p) { var _$IPdUl9 = _$VFq2V0(_$Iugf3p); if (!_$IPdUl9) return null; return _$IPdUl9; }; var _$VFq2V0 = function (canvas) { try { var context = _$SKYBQ1(canvas); if (!context) { return false; } } catch (err) { return false; } return context; }; var _$SKYBQ1 = function (_$G3VFED) { var _$hqiAmh = [elums[11], elums[12], elums[13], elums[14]]; var _$3pRSeo = null; for (var _$geZigu = 0; _$geZigu < _$hqiAmh['length']; ++_$geZigu) { try { _$3pRSeo = _$G3VFED['getContext'](_$hqiAmh[_$geZigu]); } catch (e) { continue; } if (_$3pRSeo) { break; } } return _$3pRSeo; }; } var _$jj7piQ = new _$USK2yR(); var _$m5gRsS = { vertices: new Float32Array([-0x1, 0x1, -0x1, -0x1, 0x1, 0x1, 0x1, -0x1]), n: 0x4 }; function _$eF1Tl6(_$GOd29x, _$EwgPk8) { var _$hFfsx7 = _$GOd29x['r']['length']; _$EwgPk8 = _$EwgPk8 < 0.1 ? 0.1 : _$EwgPk8; var _$AAZjRE = _$GOd29x['v'][0]; var _$FTV7xF = _$GOd29x['v'][_$hFfsx7 - 0x1]; var _$eFa7tK = document['createElement'](elums[15]); _$eFa7tK['width'] = 0x190; _$eFa7tK['height'] = 0x1e; var _$McVG92 = _$eFa7tK['getContext'](elums[16]); var _$xFGIhN = _$McVG92['createLinearGradient'](0, 0, _$eFa7tK['width'], 0); for (var _$NKOQI6 = 0; _$NKOQI6 < _$hFfsx7 - 0x1; _$NKOQI6++) { var _$UQ9RfF = (_$GOd29x['v'][_$NKOQI6] - _$AAZjRE) / (_$FTV7xF - _$AAZjRE); var _$FhdUZS = (_$GOd29x['v'][_$NKOQI6 + 0x1] - _$AAZjRE) / (_$FTV7xF - _$AAZjRE); _$FhdUZS = _$FhdUZS - (_$FhdUZS - _$UQ9RfF) * _$EwgPk8; _$xFGIhN['addColorStop'](_$UQ9RfF, elums[17] + _$GOd29x['r'][_$NKOQI6] + elums[18] + _$GOd29x['g'][_$NKOQI6] + elums[18] + _$GOd29x['b'][_$NKOQI6] + elums[18] + elums[19]); _$xFGIhN['addColorStop'](_$FhdUZS, elums[17] + _$GOd29x['r'][_$NKOQI6] + elums[18] + _$GOd29x['g'][_$NKOQI6] + elums[18] + _$GOd29x['b'][_$NKOQI6] + elums[18] + elums[19]); } _$xFGIhN['addColorStop'](0x1, elums[17] + _$GOd29x['r'][_$hFfsx7 - 0x1] + elums[18] + _$GOd29x['g'][_$hFfsx7 - 0x1] + elums[18] + _$GOd29x['b'][_$hFfsx7 - 0x1] + elums[18] + elums[19]); _$McVG92['fillStyle'] = _$xFGIhN; _$McVG92['fillRect'](0, 0, _$eFa7tK['width'], _$eFa7tK['height']); var _$4f9MQ3 = new Image(); _$4f9MQ3['src'] = _$eFa7tK['toDataURL'](elums[20]); return { vmin: _$AAZjRE, vmax: _$FTV7xF, value: _$4f9MQ3 }; } function _$SobMi7(_$JEY09I, _$3YJwz1) { var _$LtlzQE = _$3YJwz1['getSize'](); var _$9eFLcz = _$3YJwz1['getBounds'](); var _$Ft7nft = _$9eFLcz['_southWest']['lat']; var _$fe5MaT = _$9eFLcz['_northEast']['lat']; var _$W67Awv = _$9eFLcz['_southWest']['lng']; var _$zJBFAx = _$9eFLcz['_northEast']['lng']; var _$9RApCA = document['createElement'](elums[15]); _$9RApCA['width'] = _$LtlzQE['x']; _$9RApCA['height'] = _$LtlzQE['y']; var _$k2IeC9 = _$9RApCA['getContext'](elums[16]); _$JEY09I['features']['forEach'](_$hop9fT => { var _$jSl6Bj = _$hop9fT['geometry']['type']; if (_$jSl6Bj == elums[21]) { var _$7hDyKC = _$hop9fT['geometry']['coordinates']; _$7hDyKC[0]['forEach']((_$OK7xZd, _$BtDN2o) => { var _$DCodj8 = ((_$OK7xZd[0] - _$W67Awv) / (_$zJBFAx - _$W67Awv)) * _$LtlzQE['x']; var _$JFj6kT = ((_$OK7xZd[0x1] - _$Ft7nft) / (_$fe5MaT - _$Ft7nft)) * _$LtlzQE['y']; if (_$BtDN2o == 0) { _$k2IeC9['moveTo'](_$DCodj8, _$JFj6kT); } else { _$k2IeC9['lineTo'](_$DCodj8, _$JFj6kT); } }); } _$k2IeC9['fillStyle'] = elums[22]; _$k2IeC9['fill'](); }); var _$x3KPG5 = new Image(); _$x3KPG5['src'] = _$9RApCA['toDataURL'](elums[20]); return _$x3KPG5; } var _$JWY00M = function (url, colors, option) { _$C1lIPX['Layer']['CanvasLayer'] = _$C1lIPX['Layer']['extend']({ initialize: function (url, colors, option) { this['img'] = new Image(); this['img']['src'] = url; this['colorTable'] = _$eF1Tl6(colors, option['linear']); this['databounds'] = [option['latmin'], option['latmax'], option['lonmin'], option['lonmax']]; this['scale'] = option['scale']; this['opacity'] = option['opacity']; this['texture'] = null; this['texture1'] = null; this['pane'] = option['pane'] || elums[23]; this['cut'] = option['cut'] || false; this['geojson'] = option['geojson'] || null; this['grid'] = option['grid'] || false; this['cryStr'](); }, onAdd: function (map) { this['_map'] = map; if (this['cut'] && this['geojson'] == null) { return console['log'](elums[24]); } if (this['img']['complete']) { this['_map']['on'](elums[25], this['zoomEvent'], this); this['_map']['on'](elums[26], this['moveEvent'], this); this['_map']['on'](elums[27], this['createCanvas'], this); this['createCanvas'](); map['fire'](elums[26]); } this['img']['onload'] = function () { this['_map']['on'](elums[25], this['zoomEvent'], this); this['_map']['on'](elums[26], this['moveEvent'], this); this['_map']['on'](elums[27], this['createCanvas'], this); this['createCanvas'](); map['fire'](elums[26]); }['bind'](this); }, createCanvas: function () { this['deleteTexture'](); try { this['_map']['getPanes']()[this['pane']]['removeChild'](this['_canvas']); } catch (e) { console['log'](0x6f); } this['_canvas'] = _$C1lIPX['DomUtil']['create'](elums[15], elums[28]); var _$y87uT7 = this['_map']['getSize'](); this['_canvas']['width'] = _$y87uT7['x']; this['_canvas']['height'] = _$y87uT7['y']; this['gl'] = _$jj7piQ['getWebGLContext'](this['_canvas']); this['gl']['clearColor'](0, 0, 0, 0); this['gl']['enable'](this['gl']['BLEND']); this['gl']['blendFunc'](this['gl']['SRC_ALPHA_SATURATE'], this['gl']['ZERO']); var _$imDnGP = this['common_v']; var _$SptowV = this['common_header'] + this['px_to_latlng']; if (this['cut']) { _$SptowV += this['rain_cut']; } else { _$SptowV += this['rain_f']; } if (!_$jj7piQ['initShaders'](this['gl'], _$imDnGP, _$SptowV)) { return console['log'](elums[29]); } this['getUniformLocation'](); this['_map']['_panes'][this['pane']]['appendChild'](this['_canvas']); var _$s5d9do = this['_map']['options']['zoomAnimation'] && _$C1lIPX['Browser']['any3d']; _$C1lIPX['DomUtil']['addClass'](this['_canvas'], elums[30] + (_$s5d9do ? elums[31] : elums[32])); }, onRemove: function () { try { this['_map']['off'](elums[27], this['createCanvas'], this); this['_map']['off'](elums[25], this['zoomEvent'], this); this['_map']['off'](elums[26], this['moveEvent'], this); } catch (e) { console['log'](0x6f); } this['deleteTexture'](); try { this['_map']['getPanes']()[this['pane']]['removeChild'](this['_canvas']); } catch (e) { console['log'](0x6f); } }, deleteTexture() { try { if (this['texture'] != null) { this['gl']['deleteTexture'](this['texture']); } if (this['texture1'] != null) { this['gl']['deleteTexture'](this['texture1']); } if (this['texture2'] != null) { this['gl']['deleteTexture'](this['texture2']); } this['texture1'] = null; this['texture'] = null; this['texture2'] = null; } catch (e) { console['log'](elums[33]); } try { this['gl']['getExtension'](elums[34])['loseContext'](); this['gl'] = null; } catch (e) { console['log'](0x6f); } }, cryStr() { let _$e0r5pp = elums[35]; let _$vxOp42 = elums[36]; var _$daUHk8 = Buffer['from'](_$o4fJkO, elums[37])['toString'](elums[38]); let _$MTHhSD = _$1zXM2Y['createDecipheriv'](elums[39], _$e0r5pp, _$vxOp42); this['common_v'] = _$MTHhSD['update'](_$daUHk8, elums[38], elums[40]) + _$MTHhSD['final'](elums[40]); _$daUHk8 = Buffer['from'](_$NnKy7X, elums[37])['toString'](elums[38]); _$MTHhSD = _$1zXM2Y['createDecipheriv'](elums[39], _$e0r5pp, _$vxOp42); this['common_header'] = _$MTHhSD['update'](_$daUHk8, elums[38], elums[40]) + _$MTHhSD['final'](elums[40]); _$daUHk8 = Buffer['from'](_$pKGkGN, elums[37])['toString'](elums[38]); _$MTHhSD = _$1zXM2Y['createDecipheriv'](elums[39], _$e0r5pp, _$vxOp42); this['px_to_latlng'] = _$MTHhSD['update'](_$daUHk8, elums[38], elums[40]) + _$MTHhSD['final'](elums[40]); _$daUHk8 = Buffer['from'](_$8KXrtf, elums[37])['toString'](elums[38]); _$MTHhSD = _$1zXM2Y['createDecipheriv'](elums[39], _$e0r5pp, _$vxOp42); this['rain_f'] = _$MTHhSD['update'](_$daUHk8, elums[38], elums[40]) + _$MTHhSD['final'](elums[40]); _$daUHk8 = Buffer['from'](_$WAjXMU, elums[37])['toString'](elums[38]); _$MTHhSD = _$1zXM2Y['createDecipheriv'](elums[39], _$e0r5pp, _$vxOp42); this['rain_cut'] = _$MTHhSD['update'](_$daUHk8, elums[38], elums[40]) + _$MTHhSD['final'](elums[40]); }, moveEvent: function () { this['gl_draw'](); }, draw_geo(_$ntnfIa, _$gvUjYx) { var _$as1RBA = this; var _$4dSZg9; new Promise(resolve => { _$4dSZg9 = _$SobMi7(_$as1RBA['geojson'], _$as1RBA['_map']); resolve(); })['then'](function () { var _$vMLuNf = _$as1RBA['gl']; var _$8ZyZEl = _$as1RBA['_map']['getBounds'](); var _$HgAwoQ = _$vMLuNf['getAttribLocation'](_$vMLuNf['program'], elums[41]); var _$nhntXI = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[42]); var _$5ZEklU = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[43]); var _$iyoqmB = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[44]); var _$l6K6V7 = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[45]); var _$to8lVb = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[46]); var _$BY9opK = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[47]); var _$eRrQDO = _$vMLuNf['getUniformLocation'](_$vMLuNf['program'], elums[48]); var _$GsBUUr = _$jj7piQ['createBuffer'](_$vMLuNf, _$m5gRsS['vertices']); _$jj7piQ['attributeBuffer'](_$vMLuNf, _$GsBUUr, _$HgAwoQ, 0x2, 0, 0); _$as1RBA['texture'] = _$jj7piQ['createVexture'](_$vMLuNf, _$as1RBA['img'], _$as1RBA['grid']); _$as1RBA['texture1'] = _$jj7piQ['createVexture'](_$vMLuNf, _$as1RBA['colorTable']['value']); _$as1RBA['texture2'] = _$jj7piQ['createVexture'](_$vMLuNf, _$4dSZg9); _$jj7piQ['bindVexture'](_$vMLuNf, _$as1RBA['texture'], 0); _$jj7piQ['bindVexture'](_$vMLuNf, _$as1RBA['texture1'], 0x1); _$jj7piQ['bindVexture'](_$vMLuNf, _$as1RBA['texture2'], 0x2); _$vMLuNf['uniform1i'](_$nhntXI, 0); _$vMLuNf['uniform1i'](_$5ZEklU, 0x1); _$vMLuNf['uniform1i'](_$iyoqmB, 0x2); _$vMLuNf['uniform3f'](_$as1RBA['tcoord'], _$ntnfIa['x'], _$ntnfIa['y'], _$gvUjYx); _$vMLuNf['uniform2f'](_$as1RBA['tsize'], _$as1RBA['_canvas']['width'], _$as1RBA['_canvas']['height']); _$vMLuNf['uniform2f'](_$l6K6V7, _$as1RBA['colorTable']['vmin'], _$as1RBA['colorTable']['vmax']); _$vMLuNf['uniform4f'](_$to8lVb, _$as1RBA['databounds'][0], _$as1RBA['databounds'][0x1], _$as1RBA['databounds'][0x2], _$as1RBA['databounds'][0x3]); _$vMLuNf['uniform1f'](_$BY9opK, _$as1RBA['opacity']); _$vMLuNf['uniform4f'](_$eRrQDO, _$as1RBA['scale']['r'], _$as1RBA['scale']['g'], _$as1RBA['scale']['b'], _$as1RBA['scale']['a']); _$vMLuNf['uniform4f'](_$as1RBA['tlatlng'], _$8ZyZEl['_southWest']['lat'], _$8ZyZEl['_southWest']['lng'], _$8ZyZEl['_northEast']['lat'], _$8ZyZEl['_northEast']['lng']); _$vMLuNf['clear'](_$vMLuNf['COLOR_BUFFER_BIT']); _$vMLuNf['drawArrays'](_$vMLuNf['TRIANGLE_STRIP'], 0, _$m5gRsS['n']); }); }, draw: function (_$x3Vh0m, _$GhmhwF) { var _$0cwVpB = this; var _$pRs7mV = _$0cwVpB['gl']; var _$gwZK0u = _$0cwVpB['_map']['getBounds'](); var _$IN2hw3 = _$pRs7mV['getAttribLocation'](_$pRs7mV['program'], elums[41]); var _$wPbENX = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[42]); var _$w7o1KK = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[43]); var _$4HJg1L = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[45]); var _$7g4bWk = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[46]); var _$5g6YfI = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[47]); var _$o37ldn = _$pRs7mV['getUniformLocation'](_$pRs7mV['program'], elums[48]); var _$ZZ0lB0 = _$jj7piQ['createBuffer'](_$pRs7mV, _$m5gRsS['vertices']); _$jj7piQ['attributeBuffer'](_$pRs7mV, _$ZZ0lB0, _$IN2hw3, 0x2, 0, 0); _$0cwVpB['texture'] = _$jj7piQ['createVexture'](_$pRs7mV, _$0cwVpB['img'], this['grid']); _$0cwVpB['texture1'] = _$jj7piQ['createVexture'](_$pRs7mV, _$0cwVpB['colorTable']['value']); _$jj7piQ['bindVexture'](_$pRs7mV, _$0cwVpB['texture'], 0); _$jj7piQ['bindVexture'](_$pRs7mV, _$0cwVpB['texture1'], 0x1); _$pRs7mV['uniform1i'](_$wPbENX, 0); _$pRs7mV['uniform1i'](_$w7o1KK, 0x1); _$pRs7mV['uniform3f'](_$0cwVpB['tcoord'], _$x3Vh0m['x'], _$x3Vh0m['y'], _$GhmhwF); _$pRs7mV['uniform2f'](_$0cwVpB['tsize'], _$0cwVpB['_canvas']['width'], _$0cwVpB['_canvas']['height']); _$pRs7mV['uniform2f'](_$4HJg1L, _$0cwVpB['colorTable']['vmin'], _$0cwVpB['colorTable']['vmax']); _$pRs7mV['uniform4f'](_$7g4bWk, _$0cwVpB['databounds'][0], _$0cwVpB['databounds'][0x1], _$0cwVpB['databounds'][0x2], _$0cwVpB['databounds'][0x3]); _$pRs7mV['uniform1f'](_$5g6YfI, _$0cwVpB['opacity']); _$pRs7mV['uniform4f'](_$o37ldn, _$0cwVpB['scale']['r'], _$0cwVpB['scale']['g'], _$0cwVpB['scale']['b'], _$0cwVpB['scale']['a']); _$pRs7mV['uniform4f'](_$0cwVpB['tlatlng'], _$gwZK0u['_southWest']['lat'], _$gwZK0u['_southWest']['lng'], _$gwZK0u['_northEast']['lat'], _$gwZK0u['_northEast']['lng']); _$pRs7mV['clear'](_$pRs7mV['COLOR_BUFFER_BIT']); _$pRs7mV['drawArrays'](_$pRs7mV['TRIANGLE_STRIP'], 0, _$m5gRsS['n']); }, gl_draw: function () { var _$7n8ecM = this['_map']['getBounds'](); var _$qHzfC2 = this['_map']['getZoom'](); var _$VStkNf = this['_map']['latLngToLayerPoint']([_$7n8ecM['_northEast']['lat'], _$7n8ecM['_southWest']['lng']]); var _$XQ6hCR = this['_map']['project']([_$7n8ecM['_northEast']['lat'], _$7n8ecM['_southWest']['lng']], _$qHzfC2); _$C1lIPX['DomUtil']['setPosition'](this['_canvas'], _$VStkNf); if (this['cut']) { if (this['texture'] == null) { this['draw_geo'](_$XQ6hCR, _$qHzfC2, _$7n8ecM); } else { this['drawByZoom_geo'](_$XQ6hCR, _$qHzfC2); } } else { if (this['texture'] == null) { this['draw'](_$XQ6hCR, _$qHzfC2, _$7n8ecM); } else { this['drawByZoom'](_$XQ6hCR, _$qHzfC2); } } }, drawByZoom_geo(_$gjVZOM, _$sgACTR) { var _$z6ekm4; var _$hjfQsK = this; new Promise(resolve => { _$z6ekm4 = _$SobMi7(_$hjfQsK['geojson'], _$hjfQsK['_map']); resolve(); })['then'](function () { var _$oDnI6z = _$hjfQsK['gl']; var _$4eE9Ho = _$hjfQsK['_map']['getBounds'](); _$oDnI6z['activeTexture'](_$oDnI6z['TEXTURE2']); _$oDnI6z['bindTexture'](_$oDnI6z['TEXTURE_2D'], _$hjfQsK['texture2']); _$oDnI6z['texImage2D'](_$oDnI6z['TEXTURE_2D'], 0, _$oDnI6z['RGBA'], _$oDnI6z['RGBA'], _$oDnI6z['UNSIGNED_BYTE'], _$z6ekm4); _$oDnI6z['uniform4f'](_$hjfQsK['tlatlng'], _$4eE9Ho['_southWest']['lat'], _$4eE9Ho['_southWest']['lng'], _$4eE9Ho['_northEast']['lat'], _$4eE9Ho['_northEast']['lng']); _$oDnI6z['uniform3f'](_$hjfQsK['tcoord'], _$gjVZOM['x'], _$gjVZOM['y'], _$sgACTR); _$oDnI6z['uniform2f'](_$hjfQsK['tsize'], _$hjfQsK['_canvas']['width'], _$hjfQsK['_canvas']['height']); _$oDnI6z['clear'](_$oDnI6z['COLOR_BUFFER_BIT']); _$oDnI6z['drawArrays'](_$oDnI6z['TRIANGLE_STRIP'], 0, _$m5gRsS['n']); }); }, drawByZoom(_$1JNHDb, _$ZWigxM) { var _$nmy9uE = this; var _$40bRqP = _$nmy9uE['gl']; var _$TG4Q0M = _$nmy9uE['_map']['getBounds'](); _$40bRqP['uniform4f'](_$nmy9uE['tlatlng'], _$TG4Q0M['_southWest']['lat'], _$TG4Q0M['_southWest']['lng'], _$TG4Q0M['_northEast']['lat'], _$TG4Q0M['_northEast']['lng']); _$40bRqP['uniform3f'](_$nmy9uE['tcoord'], _$1JNHDb['x'], _$1JNHDb['y'], _$ZWigxM); _$40bRqP['uniform2f'](_$nmy9uE['tsize'], _$nmy9uE['_canvas']['width'], _$nmy9uE['_canvas']['height']); _$40bRqP['clear'](_$40bRqP['COLOR_BUFFER_BIT']); _$40bRqP['drawArrays'](_$40bRqP['TRIANGLE_STRIP'], 0, _$m5gRsS['n']); }, drawByRun() { var _$6AbpbY = this['gl']; _$6AbpbY['activeTexture'](_$6AbpbY['TEXTURE0']); _$6AbpbY['bindTexture'](_$6AbpbY['TEXTURE_2D'], this['texture']); _$6AbpbY['texImage2D'](_$6AbpbY['TEXTURE_2D'], 0, _$6AbpbY['RGBA'], _$6AbpbY['RGBA'], _$6AbpbY['UNSIGNED_BYTE'], this['img']); _$6AbpbY['clear'](_$6AbpbY['COLOR_BUFFER_BIT']); _$6AbpbY['drawArrays'](_$6AbpbY['TRIANGLE_STRIP'], 0, _$m5gRsS['n']); }, getUniformLocation() { var _$Mv8tbx = this['gl']; this['tcoord'] = _$Mv8tbx['getUniformLocation'](_$Mv8tbx['program'], elums[49]); this['tsize'] = _$Mv8tbx['getUniformLocation'](_$Mv8tbx['program'], elums[50]); this['tlatlng'] = _$Mv8tbx['getUniformLocation'](_$Mv8tbx['program'], elums[51]); }, zoomEvent: function () { var _$GufhTa = this['_map']; var _$Gp8JO3 = _$GufhTa['_animateToCenter']; var _$bxt42v = _$GufhTa['_animateToZoom']; var _$5urumS = _$GufhTa['getZoomScale'](_$bxt42v); var _$WxQTJa = _$C1lIPX['Layer'] ? _$GufhTa['_latLngToNewLayerPoint'](_$GufhTa['getBounds']()['getNorthWest'](), _$bxt42v, _$Gp8JO3) : _$GufhTa['getCenterOffset'](_$Gp8JO3)['multiplyBy'](-_$5urumS)['subtract'](_$GufhTa['getMapPanePos']()); _$C1lIPX['DomUtil']['setTransform'](this['_canvas'], _$WxQTJa, _$5urumS); }, updateImg(url) { this['img']['src'] = url; this['img']['onload'] = function () { this['drawByRun'](); }['bind'](this); }, updateGeo(data) { this['geojson'] = data; this['gl_draw'](); } }); return new _$C1lIPX['Layer']['CanvasLayer'](url, colors, option); }; export default _$JWY00M;